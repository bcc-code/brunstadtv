directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

interface Page{
  id: ID!
  title: String
  description: String
  sections(
    first: Int!
    after: Cursor
  ): SectionConnection!
}

type ShowPage implements Page{
  id: ID!
  title: String
  description: String
  sections(
    first: Int!
    after: Cursor
  ): SectionConnection!
  show: Show
}

type EpisodePage implements Page{
  id: ID!
  title: String
  description: String
  sections(
    first: Int!
    after: Cursor
  ): SectionConnection!
  episode: Episode
}

type Show {
  id: ID!
  title: String!
  episodeCount: Int!
  seasonCount: Int!
  seasons: [Season!]!
}

type Season {
  id: ID!
  show: Show!
  episodes: [Episode!]!
}

type PaginationInfo{
  id: ID!
  endCursor: Cursor!
  hasNextPage: Boolean!
}

type SectionConnection{
  id: ID!
  edges: [SectionEdge!]!
  pageInfo: PaginationInfo!
  cursor: Cursor!
}

type SectionEdge{
  id: ID!
  node: Section!
}

enum Language{
  en
  no
  de
}

interface Section{
  id: ID!
  title: String
}


type ItemSection implements Section {
  id: ID!
  title: String
  body: SectionBody
  pageId: ID!
}

interface SectionBody {
  id: ID!
  items: [Item!]!
}

type ContainerSection implements Section{
  id: ID!
  title: String
  sections: [Section!]!
}

type SliderItemsSection implements SectionBody {
  id: ID!
  items: [Item!]!
}

type BubblesItemsSection implements SectionBody {
  id: ID!
  items: [Item!]!
  borderColor: String
}

scalar Cursor
scalar Date

interface Item {
  id: ID!
  title: String
  imageUrl: String!
}

type URLItem implements Item {
  id: ID!
  title: String
  imageUrl: String!
  url: String!
}

type EpisodeItem implements Item {
  id: ID!
  title: String
  imageUrl: String!
  episode: Episode
}

type PageItem implements Item {
  id: ID!
  title: String
  imageUrl: String!
  pageId: ID!
  page: Page!
}

type Episode {
  id: ID!
  title: String!
  description: String!
  extraDescription: String!
  streams: [Stream!]! @goField(forceResolver: true)
  files: [File!]! @goField(forceResolver: true)
  chapters: [Chapter!]!
  season: Season @goField(forceResolver: true)
  duration: Int!
  audioLanguages: [Language!]!
  subtitleLanguages: [Language!]!
  episodeNumber: Int
}

type Chapter {
  id: ID!
  start: Int!
  title: String!
}

type File {
  id: ID!
  url: String!
  audioLanguage: Language!
  subtitleLanguage: Language
  size: Int
  fileName: String!
  mimeType: String!
}

type Stream {
  id: ID!
  url: String!
  audioLanguages: [Language!]!
  subtitleLanguages: [Language!]!
  type: StreamType!
}

enum StreamType {
  hls
  cmaf
  dash
}

schema{
  query: QueryRoot
}

type CalendarPeriod {
  id: ID!
  activeDays: [Date!]!
  events: [Event!]!
}

type CalendarDay {
  id: ID!
  events: [Event!]!
  tvGuideEntries: [TvGuideEntry!]!
}

type Event {
  id: ID!
  start: String!
  end: String!
  tvGuideEntries: [TvGuideEntry!]!
  bannerImageURL: String!
}

type TvGuideEntry {
  id: ID!
  start: String!
  end: String!
  episode: Episode
}

type Calendar {
  period(from: Date!, to: Date!) : CalendarPeriod
  day(day: Date!) : CalendarDay
}

type Settings {
  audioLanguages: [Language!]!
  subtitleLanguages: [Language!]!
}

type FAQ {
  question: String!
  answer: String!
}

type FAQCategory {
  id: ID!
  name: String!
  questions: [FAQ!]!
}

type User {
  id: ID
  anonymous: Boolean!
  bccMember: Boolean!
  audience: String
  email: String
  settings: Settings!
  roles: [String!]!
}

type QueryRoot{
  page(
    id: ID!
  ): Page

  episode(
    id: ID!
  ): Episode

  section(
    id: ID!
  ): Section

  calendar: Calendar
  event(id: ID!): Event
  allFAQs: [FAQCategory!]!
  me: User!
}
